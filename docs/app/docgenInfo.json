{
  "src/addons/Confirm/Confirm.js": {
    "methods": [
      {
        "name": "handleCancel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleCancelOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "predefinedProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleConfirmOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "predefinedProps",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "cancelButton": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "defaultValue": {
          "value": "'Cancel'",
          "computed": false
        },
        "docBlock": {
          "description": "The cancel button text.",
          "tags": []
        }
      },
      "confirmButton": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "defaultValue": {
          "value": "'OK'",
          "computed": false
        },
        "docBlock": {
          "description": "The OK button text.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "defaultValue": {
          "value": "'Are you sure?'",
          "computed": false
        },
        "docBlock": {
          "description": "The ModalContent text.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "The ModalHeader text.",
          "tags": []
        }
      },
      "onCancel": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the Modal is closed without clicking confirm.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onConfirm": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the OK button is clicked.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether or not the modal is visible.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A Confirm modal gives the user a choice to confirm or cancel an action/",
      "tags": [
        {
          "title": "see",
          "description": "Modal"
        }
      ]
    }
  },
  "src/addons/Portal/Portal.js": {
    "methods": [
      {
        "name": "handleDocumentClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEscape",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePortalMouseLeave",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePortalMouseEnter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleTriggerBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTriggerClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTriggerFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTriggerMouseLeave",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTriggerMouseEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "open",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "openWithTimeout",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "delay",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "close",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "closeWithTimeout",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "delay",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderPortal",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "mountPortal",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "unmountPortal",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "closeOnDocumentClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Controls whether or not the portal should close when the document is clicked.",
          "tags": []
        }
      },
      "closeOnEscape": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Controls whether or not the portal should close when escape is pressed is displayed.",
          "tags": []
        }
      },
      "closeOnPortalMouseLeave": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the portal should close when mousing out of the portal.\nNOTE: This will prevent `closeOnTriggerMouseLeave` when mousing over the\ngap from the trigger to the portal.",
          "tags": []
        }
      },
      "closeOnRootNodeClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the portal should close on a click on the portal background.\nNOTE: This differs from closeOnDocumentClick:\n- DocumentClick - any click not within the portal\n- RootNodeClick - a click not within the portal but within the portal's wrapper",
          "tags": []
        }
      },
      "closeOnTriggerBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the portal should close on blur of the trigger.",
          "tags": []
        }
      },
      "closeOnTriggerClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the portal should close on click of the trigger.",
          "tags": []
        }
      },
      "closeOnTriggerMouseLeave": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the portal should close when mousing out of the trigger.",
          "tags": []
        }
      },
      "defaultOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Initial value of open.",
          "tags": []
        }
      },
      "mountNode": {
        "type": {
          "name": "any"
        },
        "required": false,
        "docBlock": {
          "description": "The node where the portal should mount.",
          "tags": []
        }
      },
      "mouseEnterDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "docBlock": {
          "description": "Milliseconds to wait before opening on mouse over",
          "tags": []
        }
      },
      "mouseLeaveDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "docBlock": {
          "description": "Milliseconds to wait before closing on mouse leave",
          "tags": []
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when a close event happens",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onMount": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the portal is mounted on the DOM",
          "tags": []
        }
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when an open event happens",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onUnmount": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the portal is unmounted from the DOM",
          "tags": []
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the portal is displayed.",
          "tags": []
        }
      },
      "openOnTriggerClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Controls whether or not the portal should open when the trigger is clicked.",
          "tags": []
        }
      },
      "openOnTriggerFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the portal should open on focus of the trigger.",
          "tags": []
        }
      },
      "openOnTriggerMouseEnter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the portal should open when mousing over the trigger.",
          "tags": []
        }
      },
      "prepend": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether the portal should be prepended to the mountNode instead of appended.",
          "tags": []
        }
      },
      "trigger": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Element to be rendered in-place where the portal is defined.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A component that allows you to render children outside their parent.",
      "tags": [
        {
          "title": "see",
          "description": "Modal"
        },
        {
          "title": "see",
          "description": "Popup"
        },
        {
          "title": "see",
          "description": "Dimmer"
        },
        {
          "title": "see",
          "description": "Confirm"
        }
      ]
    }
  },
  "src/addons/Radio/Radio.js": {
    "methods": [],
    "props": {
      "slider": {
        "type": {
          "name": "custom",
          "raw": "Checkbox.propTypes.slider"
        },
        "required": false,
        "docBlock": {
          "description": "Format to emphasize the current selection state.",
          "tags": []
        }
      },
      "toggle": {
        "type": {
          "name": "custom",
          "raw": "Checkbox.propTypes.toggle"
        },
        "required": false,
        "docBlock": {
          "description": "Format to show an on or off choice.",
          "tags": []
        }
      },
      "type": {
        "type": {
          "name": "custom",
          "raw": "Checkbox.propTypes.type"
        },
        "required": false,
        "defaultValue": {
          "value": "'radio'",
          "computed": false
        },
        "docBlock": {
          "description": "HTML input type, either checkbox or radio.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A Radio is sugar for <Checkbox radio />.\nUseful for exclusive groups of sliders or toggles.",
      "tags": [
        {
          "title": "see",
          "description": "Checkbox"
        },
        {
          "title": "see",
          "description": "Form"
        }
      ]
    }
  },
  "src/addons/TextArea/TextArea.js": {
    "methods": [
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "removeAutoHeightStyles",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "updateHeight",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'textarea'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "autoHeight": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Indicates whether height of the textarea fits the content or not.",
          "tags": []
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on change.",
          "tags": [
            {
              "title": "param",
              "description": "The React SyntheticEvent object",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and the event value.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "3",
          "computed": false
        },
        "docBlock": {
          "description": "Indicates row count for a TextArea.",
          "tags": []
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "docBlock": {
          "description": "Custom TextArea style.",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "The value of the textarea.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A TextArea can be used to allow for extended user input.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        }
      ]
    }
  },
  "src/addons/Select/Select.js": {
    "methods": [],
    "docBlock": {
      "description": "A Select is sugar for <Dropdown selection />.",
      "tags": [
        {
          "title": "see",
          "description": "Dropdown"
        },
        {
          "title": "see",
          "description": "Form"
        }
      ]
    }
  },
  "src/behaviors/Visibility/Visibility.js": {
    "methods": [
      {
        "name": "execute",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "callback",
            "type": null
          },
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "fireCallbacks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "fireOnPassed",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleScroll",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "continuous": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "docBlock": {
          "description": "When set to true a callback will occur anytime an element passes a condition not just immediately after the\nthreshold is met.",
          "tags": []
        }
      },
      "onBottomPassed": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's bottom edge has passed top of screen.",
          "tags": []
        }
      },
      "onBottomPassedReverse": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's bottom edge has not passed top of screen.",
          "tags": []
        }
      },
      "onBottomVisible": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's bottom edge has passed bottom of screen",
          "tags": []
        }
      },
      "onBottomVisibleReverse": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's bottom edge has not passed bottom of screen.",
          "tags": []
        }
      },
      "once": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "When set to false a callback will occur each time an element passes the threshold for a condition.",
          "tags": []
        }
      },
      "onPassed": {
        "type": {
          "name": "object"
        },
        "required": false,
        "docBlock": {
          "description": "Element is not visible on the screen.",
          "tags": []
        }
      },
      "onPassing": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Any part of an element is visible on screen.",
          "tags": []
        }
      },
      "onPassingReverse": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's top has not passed top of screen but bottom has.",
          "tags": []
        }
      },
      "onOffScreen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element is not visible on the screen.",
          "tags": []
        }
      },
      "onOnScreen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element is visible on the screen.",
          "tags": []
        }
      },
      "onTopPassed": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's top edge has passed top of the screen.",
          "tags": []
        }
      },
      "onTopPassedReverse": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's top edge has not passed top of the screen.",
          "tags": []
        }
      },
      "onTopVisible": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's top edge has passed bottom of screen.",
          "tags": []
        }
      },
      "onTopVisibleReverse": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's top edge has not passed bottom of screen.",
          "tags": []
        }
      },
      "onUpdate": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Element's top edge has passed bottom of screen.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Visibility provides a set of callbacks for when a content appears in the viewport.",
      "tags": []
    }
  },
  "src/elements/Button/Button.js": {
    "methods": [
      {
        "name": "computeElementType",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeTabIndex",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ElementType",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "hasIconClass",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'button'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can show it is currently the active user selection.",
          "tags": []
        }
      },
      "animated": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "fade",
                "vertical"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A button can animate to show hidden content.",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "enum",
          "value": [
            "left",
            "right",
            "top",
            "bottom"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A button can be attached to the top or bottom of other content.",
          "tags": []
        }
      },
      "basic": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A basic button is less pronounced.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  PropTypes.node,\n  customPropTypes.disallow(['label']),\n  customPropTypes.givenProps(\n    {\n      icon: PropTypes.oneOfType([\n        PropTypes.string.isRequired,\n        PropTypes.object.isRequired,\n        PropTypes.element.isRequired,\n      ]),\n    },\n    customPropTypes.disallow(['icon']),\n  ),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "circular": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can be circular.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black",
            "facebook",
            "google plus",
            "instagram",
            "linkedin",
            "twitter",
            "vk",
            "youtube"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A button can have different colors",
          "tags": []
        }
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can reduce its padding to fit into tighter spaces.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can show it is currently unable to be interacted with.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A button can be aligned to the left or right of its container.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can take the width of its container.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.some([\n  PropTypes.bool,\n  PropTypes.string,\n  PropTypes.object,\n  PropTypes.element,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Add an Icon by name, props object, or pass an <Icon />.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can be formatted to appear on dark backgrounds.",
          "tags": []
        }
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.some([\n  PropTypes.string,\n  PropTypes.object,\n  PropTypes.element,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Add a Label by text, props object, or pass a <Label />.",
          "tags": []
        }
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            "right",
            "left"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A labeled button can format a Label or Icon to appear on the left or right.",
          "tags": []
        }
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can show a loading indicator.",
          "tags": []
        }
      },
      "negative": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can hint towards a negative consequence.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called after user's click.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "positive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can hint towards a positive consequence.",
          "tags": []
        }
      },
      "primary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can be formatted to show different levels of emphasis.",
          "tags": []
        }
      },
      "secondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can be formatted to show different levels of emphasis.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "medium",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A button can have different sizes.",
          "tags": []
        }
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A button can receive focus.",
          "tags": []
        }
      },
      "toggle": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A button can be formatted to toggle on and off.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A Button indicates a possible user action.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        },
        {
          "title": "see",
          "description": "Icon"
        },
        {
          "title": "see",
          "description": "Label"
        }
      ]
    }
  },
  "src/elements/Button/ButtonContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Initially hidden, visible on hover.",
          "tags": []
        }
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Initially visible, hidden on hover.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Used in some Button types, such as `animated`.",
      "tags": []
    }
  },
  "src/elements/Button/ButtonGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "enum",
          "value": [
            "left",
            "right",
            "top",
            "bottom"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A button can be attached to the top or bottom of other content.",
          "tags": []
        }
      },
      "basic": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can be less pronounced.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Groups can have a shared color.",
          "tags": []
        }
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can reduce their padding to fit into tighter spaces.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Groups can be aligned to the left or right of its container.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can take the width of their container.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can be formatted as icons.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can be formatted to appear on dark backgrounds.",
          "tags": []
        }
      },
      "labeled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can be formatted as labeled icon buttons.",
          "tags": []
        }
      },
      "negative": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can hint towards a negative consequence.",
          "tags": []
        }
      },
      "positive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can hint towards a positive consequence.",
          "tags": []
        }
      },
      "primary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can be formatted to show different levels of emphasis.",
          "tags": []
        }
      },
      "secondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can be formatted to show different levels of emphasis.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "medium",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Groups can have different sizes.",
          "tags": []
        }
      },
      "toggle": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can be formatted to toggle on and off.",
          "tags": []
        }
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Groups can be formatted to appear vertically.",
          "tags": []
        }
      },
      "widths": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Groups can have their widths divided evenly.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Buttons can be grouped.",
      "tags": []
    }
  },
  "src/elements/Button/ButtonOr.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "text": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Or buttons can have their text localized, or adjusted by using the text prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Button groups can contain conditionals.",
      "tags": []
    }
  },
  "src/elements/Container/Container.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Container has no maximum width.",
          "tags": []
        }
      },
      "text": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Reduce maximum width to more naturally accommodate text.",
          "tags": []
        }
      },
      "textAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "center",
            "right",
            "justified"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Align container text.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A container limits content to a maximum width.",
      "tags": []
    }
  },
  "src/elements/Divider/Divider.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "clearing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Divider can clear the content above it.",
          "tags": []
        }
      },
      "fitted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Divider can be fitted without any space above or below it.",
          "tags": []
        }
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Divider can divide content without creating a dividing line.",
          "tags": []
        }
      },
      "horizontal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Divider can segment content horizontally.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Divider can have it's colours inverted.",
          "tags": []
        }
      },
      "section": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Divider can provide greater margins to divide sections of content.",
          "tags": []
        }
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Divider can segment content vertically.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A divider visually segments content into groups.",
      "tags": []
    }
  },
  "src/elements/Flag/Flag.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'i'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "name": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.suggest(names)"
        },
        "required": false,
        "docBlock": {
          "description": "Flag name, can use the two digit country code, the full name, or a common alias.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A flag is is used to represent a political state.",
      "tags": []
    }
  },
  "src/elements/Header/Header.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "top",
                "bottom"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Attach header  to other content, like a segment.",
          "tags": []
        }
      },
      "block": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Format header to appear inside a content block.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Color of the header.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Show that the header is inactive.",
          "tags": []
        }
      },
      "dividing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Divide header from the content below it.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Header can sit to the left or right of other content.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['image']),\n  PropTypes.oneOfType([\n    PropTypes.bool,\n    customPropTypes.itemShorthand,\n  ]),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Add an icon by icon name or pass an Icon.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['icon']),\n  PropTypes.oneOfType([\n    PropTypes.bool,\n    customPropTypes.itemShorthand,\n  ]),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Add an image by img src or pass an Image.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Inverts the color of the header for dark backgrounds.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "tiny",
            "small",
            "medium",
            "large",
            "huge"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Content headings are sized with em and are based on the font-size of their container.",
          "tags": []
        }
      },
      "sub": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Headers may be formatted to label smaller or de-emphasized content.",
          "tags": []
        }
      },
      "subheader": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Header.Subheader.",
          "tags": []
        }
      },
      "textAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "center",
            "right",
            "justified"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Align header content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A header provides a short summary of content",
      "tags": []
    }
  },
  "src/elements/Header/HeaderContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Header content wraps the main content when there is an adjacent Icon or Image.",
      "tags": []
    }
  },
  "src/elements/Header/HeaderSubheader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Headers may contain subheaders.",
      "tags": []
    }
  },
  "src/elements/Icon/Icon.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'i'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "bordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Formatted to appear bordered.",
          "tags": []
        }
      },
      "circular": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Icon can formatted to appear circular.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Color of the icon.",
          "tags": []
        }
      },
      "corner": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Icons can display a smaller corner icon.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Show that the icon is inactive.",
          "tags": []
        }
      },
      "fitted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Fitted, without space to left or right of Icon.",
          "tags": []
        }
      },
      "flipped": {
        "type": {
          "name": "enum",
          "value": [
            "horizontally",
            "vertically"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Icon can flipped.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Formatted to have its colors inverted for contrast.",
          "tags": []
        }
      },
      "link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Icon can be formatted as a link.",
          "tags": []
        }
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Icon can be used as a simple loader.",
          "tags": []
        }
      },
      "name": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.suggest(SUI.ALL_ICONS_IN_ALL_CONTEXTS)"
        },
        "required": false,
        "docBlock": {
          "description": "Name of the icon.",
          "tags": []
        }
      },
      "rotated": {
        "type": {
          "name": "enum",
          "value": [
            "clockwise",
            "counterclockwise"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Icon can rotated.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Size of the icon.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An icon is a glyph used to represent something else.",
      "tags": [
        {
          "title": "see",
          "description": "Image"
        }
      ]
    }
  },
  "src/elements/Icon/IconGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'i'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Size of the icon group.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Several icons can be used together as a group.",
      "tags": []
    }
  },
  "src/elements/Image/Image.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'img'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Alternate text for the image specified.",
          "tags": []
        }
      },
      "avatar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An image may be formatted to appear inline with text as an avatar.",
          "tags": []
        }
      },
      "bordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An image may include a border to emphasize the edges of white or transparent content.",
          "tags": []
        }
      },
      "centered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An image can appear centered in a content block.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An image can show that it is disabled and cannot be selected.",
          "tags": []
        }
      },
      "dimmer": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Dimmer.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An image can sit to the left or right of other content.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  PropTypes.bool,\n  customPropTypes.disallow(['size']),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "An image can take up the width of its container.",
          "tags": []
        }
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "The img element height attribute.",
          "tags": []
        }
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An image can be hidden.",
          "tags": []
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Renders the Image as an <a> tag with this href.",
          "tags": []
        }
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An image may appear inline.",
          "tags": []
        }
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Label.",
          "tags": []
        }
      },
      "shape": {
        "type": {
          "name": "enum",
          "value": [
            "rounded",
            "circular"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An image may appear rounded or circular.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "medium",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An image may appear at different sizes.",
          "tags": []
        }
      },
      "spaced": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "left",
                "right"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An image can specify that it needs an additional spacing to separate it from nearby content.",
          "tags": []
        }
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Specifies the URL of the image.",
          "tags": []
        }
      },
      "ui": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Whether or not to add the ui className.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An image can specify its vertical alignment.",
          "tags": []
        }
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "The img element width attribute.",
          "tags": []
        }
      },
      "wrapped": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  PropTypes.bool,\n  // these props wrap the image in an a tag already\n  customPropTypes.disallow(['href']),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "An image can render wrapped in a `div.ui.image` as alternative HTML markup.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An image is a graphic representation of something.",
      "tags": [
        {
          "title": "see",
          "description": "Icon"
        }
      ]
    }
  },
  "src/elements/Image/ImageGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "medium",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A group of images can be formatted to have the same size.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A group of images.",
      "tags": []
    }
  },
  "src/elements/Input/Input.js": {
    "methods": [
      {
        "name": "computeIcon",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeTabIndex",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChildOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "child",
            "type": null
          },
          {
            "name": "defaultProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleInputRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "partitionProps",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "action": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "custom",
              "raw": "customPropTypes.itemShorthand"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An Input can be formatted to alert the user to an action they may perform.",
          "tags": []
        }
      },
      "actionPosition": {
        "type": {
          "name": "enum",
          "value": [
            "left"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An action can appear along side an Input on the left or right.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An Input field can show that it is disabled.",
          "tags": []
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An Input field can show the data contains errors.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Take on the size of it's container.",
          "tags": []
        }
      },
      "focus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An Input field can show a user is currently interacting with it.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "custom",
              "raw": "customPropTypes.itemShorthand"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Optional Icon to display inside the Input.",
          "tags": []
        }
      },
      "iconPosition": {
        "type": {
          "name": "enum",
          "value": [
            "left"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An Icon can appear inside an Input on the left or right.",
          "tags": []
        }
      },
      "input": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for creating the HTML Input.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Format to appear on dark backgrounds.",
          "tags": []
        }
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Optional Label to display along side the Input.",
          "tags": []
        }
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            "left",
            "right",
            "left corner",
            "right corner"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A Label can appear outside an Input on the left or right.",
          "tags": []
        }
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An Icon Input field can show that it is currently loading data.",
          "tags": []
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on change.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and proposed value.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "medium",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An Input can vary in size.",
          "tags": []
        }
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An Input can receive focus.",
          "tags": []
        }
      },
      "transparent": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Transparent Input has no background.",
          "tags": []
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "defaultValue": {
          "value": "'text'",
          "computed": false
        },
        "docBlock": {
          "description": "The HTML input type.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An Input is a field used to elicit a response from a user.",
      "tags": [
        {
          "title": "see",
          "description": "Button"
        },
        {
          "title": "see",
          "description": "Form"
        },
        {
          "title": "see",
          "description": "Icon"
        },
        {
          "title": "see",
          "description": "Label"
        }
      ]
    }
  },
  "src/elements/Loader/Loader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A loader can be active or visible.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A loader can be disabled or hidden.",
          "tags": []
        }
      },
      "indeterminate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A loader can show it's unsure of how long a task will take.",
          "tags": []
        }
      },
      "inline": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "centered"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Loaders can appear inline with content.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Loaders can have their colors inverted.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "medium",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Loaders can have different sizes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A loader alerts a user to wait for an activity to complete.",
      "tags": [
        {
          "title": "see",
          "description": "Dimmer"
        }
      ]
    }
  },
  "src/elements/Reveal/Reveal.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An active reveal displays its hidden content.",
          "tags": []
        }
      },
      "animated": {
        "type": {
          "name": "enum",
          "value": [
            "fade",
            "small fade",
            "move",
            "move right",
            "move up",
            "move down",
            "rotate",
            "rotate left"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An animation name that will be applied to Reveal.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A disabled reveal will not animate when hovered.",
          "tags": []
        }
      },
      "instant": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An element can show its content without delay.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A reveal displays additional content in place of previous content when activated.",
      "tags": []
    }
  },
  "src/elements/Reveal/RevealContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A reveal may contain content that is visible before interaction.",
          "tags": []
        }
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A reveal may contain content that is hidden before user interaction.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A content sub-component for the Reveal.",
      "tags": []
    }
  },
  "src/elements/Segment/Segment.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "top",
                "bottom"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Attach segment to other content, like a header.",
          "tags": []
        }
      },
      "basic": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A basic segment has no special formatting.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "circular": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment can be circular.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "clearing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment can clear floated content.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Segment can be colored.",
          "tags": []
        }
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment may take up only as much space as is necessary.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment may show its content is disabled.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Segment content can be floated to the left or right.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment can have its colors inverted for contrast.",
          "tags": []
        }
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment may show its content is being loaded.",
          "tags": []
        }
      },
      "padded": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "very"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A segment can increase its padding.",
          "tags": []
        }
      },
      "piled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Formatted to look like a pile of pages.",
          "tags": []
        }
      },
      "raised": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment may be formatted to raise above the page.",
          "tags": []
        }
      },
      "secondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment can be formatted to appear less noticeable.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A segment can have different sizes.",
          "tags": []
        }
      },
      "stacked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Formatted to show it contains multiple pages.",
          "tags": []
        }
      },
      "tertiary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment can be formatted to appear even less noticeable.",
          "tags": []
        }
      },
      "textAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "center",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Formats content to be aligned as part of a vertical group.",
          "tags": []
        }
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Formats content to be aligned vertically.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A segment is used to create a grouping of related content.",
      "tags": []
    }
  },
  "src/elements/Segment/SegmentGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment may take up only as much space as is necessary.",
          "tags": []
        }
      },
      "horizontal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Formats content to be aligned horizontally.",
          "tags": []
        }
      },
      "piled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Formatted to look like a pile of pages.",
          "tags": []
        }
      },
      "raised": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A segment group may be formatted to raise above the page.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A segment group can have different sizes.",
          "tags": []
        }
      },
      "stacked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Formatted to show it contains multiple pages.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A group of segments can be formatted to appear together.",
      "tags": []
    }
  },
  "src/elements/Step/Step.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A step can be highlighted as active.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A step can show that a user has completed it.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for StepDescription.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Show that the Loader is inactive.",
          "tags": []
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Render as an `a` tag instead of a `div` and adds the href attribute.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Icon.",
          "tags": []
        }
      },
      "link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A step can be link.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click. When passed, the component will render as an `a`\ntag by default instead of a `div`.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "ordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A step can show a ordered sequence of steps. Passed from StepGroup.",
          "tags": []
        }
      },
      "title": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for StepTitle.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A step shows the completion status of an activity in a series of activities.",
      "tags": []
    }
  },
  "src/elements/Step/StepContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for StepDescription.",
          "tags": []
        }
      },
      "title": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for StepTitle.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A step can contain a content.",
      "tags": []
    }
  },
  "src/elements/Step/StepDescription.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "",
      "tags": []
    }
  },
  "src/elements/Step/StepGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A fluid step takes up the width of its container.",
          "tags": []
        }
      },
      "items": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand array of props for Step.",
          "tags": []
        }
      },
      "ordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A step can show a ordered sequence of steps.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Steps can have different sizes.",
          "tags": []
        }
      },
      "stackable": {
        "type": {
          "name": "enum",
          "value": [
            "tablet"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A step can stack vertically only on smaller screens.",
          "tags": []
        }
      },
      "unstackable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A step can prevent itself from stacking on mobile.",
          "tags": []
        }
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A step can be displayed stacked vertically.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A set of steps.",
      "tags": []
    }
  },
  "src/elements/Step/StepTitle.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "title": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A step can contain a title.",
      "tags": []
    }
  },
  "src/elements/List/List.js": {
    "methods": [
      {
        "name": "handleItemOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "predefinedProps",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "animated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list can animate to set the current item apart from the list.",
          "tags": []
        }
      },
      "bulleted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list can mark items with a bullet.",
          "tags": []
        }
      },
      "celled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list can divide its items into cells.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "divided": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list can show divisions between content.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An list can be floated left or right.",
          "tags": []
        }
      },
      "horizontal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list can be formatted to have items appear horizontally.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list can be inverted to appear on a dark background.",
          "tags": []
        }
      },
      "items": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand array of props for ListItem.",
          "tags": []
        }
      },
      "link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list can be specially formatted for navigation links.",
          "tags": []
        }
      },
      "onItemClick": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['children']),\n  PropTypes.func,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "onClick handler for ListItem. Mutually exclusive with children.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All item props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "ordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list can be ordered numerically.",
          "tags": []
        }
      },
      "relaxed": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "very"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A list can relax its padding to provide more negative space.",
          "tags": []
        }
      },
      "selection": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A selection list formats list items as possible choices.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "medium",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A list can vary in size.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An element inside a list can be vertically aligned.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A list groups related content.",
      "tags": []
    }
  },
  "src/elements/List/ListContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ListDescription.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An list content can be floated left or right.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ListHeader.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An element inside a list can be vertically aligned.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A list item can contain a content.",
      "tags": []
    }
  },
  "src/elements/List/ListDescription.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A list item can contain a description.",
      "tags": []
    }
  },
  "src/elements/List/ListHeader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A list item can contain a header.",
      "tags": []
    }
  },
  "src/elements/List/ListIcon.js": {
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An element inside a list can be vertically aligned.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A list item can contain an icon.",
      "tags": []
    }
  },
  "src/elements/List/ListItem.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list item can active.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.\n\nHeads up!\n\nThis is handled slightly differently than the typical `content` prop since\nthe wrapping ListContent is not used when there's no icon or image.\n\nIf you pass content as:\n- an element/literal, it's treated as the sibling node to\nheader/description (whether wrapped in Item.Content or not).\n- a props object, it forces the presence of Item.Content and passes those\nprops to it. If you pass a content prop within that props object, it\nwill be treated as the sibling node to header/description.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ListDescription.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A list item can disabled.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ListHeader.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['image']),\n  customPropTypes.itemShorthand,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ListIcon.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['icon']),\n  customPropTypes.itemShorthand,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Image.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "A ListItem can be clicked",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "A value for an ordered list.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A list item can contain a set of items.",
      "tags": []
    }
  },
  "src/elements/List/ListList.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A list can contain a sub list.",
      "tags": []
    }
  },
  "src/elements/Label/Label.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleIconOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "predefinedProps",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A label can be active.",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "enum",
          "value": [
            "top",
            "bottom",
            "top right",
            "top left",
            "bottom left",
            "bottom right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A label can attach to a content segment.",
          "tags": []
        }
      },
      "basic": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A label can reduce its complexity.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "circular": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A label can be circular.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Color of the label.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "corner": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "left",
                "right"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A label can position itself in the corner of an element.",
          "tags": []
        }
      },
      "detail": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for LabelDetail.",
          "tags": []
        }
      },
      "empty": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  PropTypes.bool,\n  customPropTypes.demand(['circular']),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Formats the label as a dot.",
          "tags": []
        }
      },
      "floating": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Float above another element in the upper right corner.",
          "tags": []
        }
      },
      "horizontal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A horizontal label is formatted to label content along-side it horizontally.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Icon.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "custom",
              "raw": "customPropTypes.itemShorthand"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A label can be formatted to emphasize an image or prop can be used as shorthand for Image.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onRemove": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Adds an \"x\" icon, called when \"x\" is clicked.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "pointing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "above",
                "below",
                "left",
                "right"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A label can point to content next to it.",
          "tags": []
        }
      },
      "removeIcon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Icon to appear as the last child and trigger onRemove.",
          "tags": []
        }
      },
      "ribbon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "right"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A label can appear as a ribbon attaching itself to an element.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "medium",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A label can have different sizes.",
          "tags": []
        }
      },
      "tag": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A label can appear as a tag.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A label displays content classification.",
      "tags": []
    }
  },
  "src/elements/Label/LabelDetail.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "",
      "tags": []
    }
  },
  "src/elements/Label/LabelGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "circular": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Labels can share shapes.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Label group can share colors together.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "medium",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Label group can share sizes together.",
          "tags": []
        }
      },
      "tag": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Label group can share tag formatting.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A label can be grouped.",
      "tags": []
    }
  },
  "src/elements/Rail/Rail.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A rail can appear attached to the main viewport.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "close": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "very"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A rail can appear closer to the main viewport.",
          "tags": []
        }
      },
      "dividing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A rail can create a division between itself and a container.",
          "tags": []
        }
      },
      "internal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A rail can attach itself to the inside of a container.",
          "tags": []
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": true,
        "docBlock": {
          "description": "A rail can be presented on the left or right side of a container.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A rail can have different sizes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A rail is used to show accompanying content outside the boundaries of the main view of a site.",
      "tags": []
    }
  },
  "src/collections/Breadcrumb/Breadcrumb.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "divider": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['icon']),\n  customPropTypes.contentShorthand,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content of the Breadcrumb.Divider.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['divider']),\n  customPropTypes.itemShorthand,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "For use with the sections prop. Render as an `Icon` component with `divider` class instead of a `div` in\nBreadcrumb.Divider.",
          "tags": []
        }
      },
      "sections": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand array of props for Breadcrumb.Section.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Size of Breadcrumb.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A breadcrumb is used to show hierarchy between content.",
      "tags": []
    }
  },
  "src/collections/Breadcrumb/BreadcrumbDivider.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Render as an `Icon` component with `divider` class instead of a `div`.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A divider sub-component for Breadcrumb component.",
      "tags": []
    }
  },
  "src/collections/Breadcrumb/BreadcrumbSection.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Style as the currently active section.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "href": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['link']),\n  PropTypes.string,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Render as an `a` tag instead of a `div` and adds the href attribute.",
          "tags": []
        }
      },
      "link": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['href']),\n  PropTypes.bool,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Render as an `a` tag instead of a `div`.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click. When passed, the component will render as an `a`\ntag by default instead of a `div`.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      }
    },
    "docBlock": {
      "description": "A section sub-component for Breadcrumb component.",
      "tags": []
    }
  },
  "src/collections/Form/Form.js": {
    "methods": [
      {
        "name": "handleSubmit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "...args",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'form'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "action": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "The HTML form action",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Automatically show any error Message children.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A form can have its color inverted for contrast.",
          "tags": []
        }
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Automatically show a loading indicator.",
          "tags": []
        }
      },
      "onSubmit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "The HTML form submit handler.",
          "tags": []
        }
      },
      "reply": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A comment can contain a form to reply to a comment. This may have arbitrary content.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A form can vary in size.",
          "tags": []
        }
      },
      "success": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Automatically show any success Message children.",
          "tags": []
        }
      },
      "unstackable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A form can prevent itself from stacking on mobile.",
          "tags": []
        }
      },
      "warning": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Automatically show any warning Message children.",
          "tags": []
        }
      },
      "widths": {
        "type": {
          "name": "enum",
          "value": [
            "equal"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Forms can automatically divide fields to be equal width.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A Form displays a set of related user input fields in a structured way.",
      "tags": [
        {
          "title": "see",
          "description": "Button"
        },
        {
          "title": "see",
          "description": "Checkbox"
        },
        {
          "title": "see",
          "description": "Dropdown"
        },
        {
          "title": "see",
          "description": "Input"
        },
        {
          "title": "see",
          "description": "Message"
        },
        {
          "title": "see",
          "description": "Radio"
        },
        {
          "title": "see",
          "description": "Select"
        },
        {
          "title": "see",
          "description": "Visibility"
        }
      ]
    }
  },
  "src/collections/Form/FormButton.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "FormField",
          "computed": true
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "control": {
        "type": {
          "name": "custom",
          "raw": "FormField.propTypes.control"
        },
        "required": false,
        "defaultValue": {
          "value": "Button",
          "computed": true
        },
        "docBlock": {
          "description": "A FormField control prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Sugar for <Form.Field control={Button} />.",
      "tags": [
        {
          "title": "see",
          "description": "Button"
        },
        {
          "title": "see",
          "description": "Form"
        }
      ]
    }
  },
  "src/collections/Form/FormCheckbox.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "FormField",
          "computed": true
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "control": {
        "type": {
          "name": "custom",
          "raw": "FormField.propTypes.control"
        },
        "required": false,
        "defaultValue": {
          "value": "Checkbox",
          "computed": true
        },
        "docBlock": {
          "description": "A FormField control prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Sugar for <Form.Field control={Checkbox} />.",
      "tags": [
        {
          "title": "see",
          "description": "Checkbox"
        },
        {
          "title": "see",
          "description": "Form"
        }
      ]
    }
  },
  "src/collections/Form/FormDropdown.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "FormField",
          "computed": true
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "control": {
        "type": {
          "name": "custom",
          "raw": "FormField.propTypes.control"
        },
        "required": false,
        "defaultValue": {
          "value": "Dropdown",
          "computed": true
        },
        "docBlock": {
          "description": "A FormField control prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Sugar for <Form.Field control={Dropdown} />.",
      "tags": [
        {
          "title": "see",
          "description": "Dropdown"
        },
        {
          "title": "see",
          "description": "Form"
        }
      ]
    }
  },
  "src/collections/Form/FormField.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "control": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.some([\n  PropTypes.func,\n  PropTypes.oneOf(['button', 'input', 'select', 'textarea']),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\nExtra FormField props are passed to the control component.\nMutually exclusive with children.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Individual fields may be disabled.",
          "tags": []
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Individual fields may display an error state.",
          "tags": []
        }
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A field can have its label next to instead of above it.",
          "tags": []
        }
      },
      "label": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Mutually exclusive with children.",
          "tags": []
        }
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A field can show that input is mandatory.",
          "tags": []
        }
      },
      "type": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['control']),\n  // don't strictly validate HTML types\n  // a control might be passed that uses a `type` prop with unknown values\n  // let the control validate if for us\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Passed to the control component (i.e. <input type='password' />)",
          "tags": []
        }
      },
      "width": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A field can specify its width in grid columns",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A field is a form element containing a label and an input.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        },
        {
          "title": "see",
          "description": "Button"
        },
        {
          "title": "see",
          "description": "Checkbox"
        },
        {
          "title": "see",
          "description": "Dropdown"
        },
        {
          "title": "see",
          "description": "Input"
        },
        {
          "title": "see",
          "description": "Radio"
        },
        {
          "title": "see",
          "description": "Select"
        },
        {
          "title": "see",
          "description": "Visibility"
        }
      ]
    }
  },
  "src/collections/Form/FormGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "grouped": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['inline']),\n  PropTypes.bool,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Fields can show related choices.",
          "tags": []
        }
      },
      "inline": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['grouped']),\n  PropTypes.bool,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Multiple fields may be inline in a row.",
          "tags": []
        }
      },
      "unstackable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A form group can prevent itself from stacking on mobile.",
          "tags": []
        }
      },
      "widths": {
        "type": {
          "name": "enum",
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen",
            "equal"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Fields Groups can specify their width in grid columns or automatically divide fields to be equal width.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A set of fields can appear grouped together.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        }
      ]
    }
  },
  "src/collections/Form/FormInput.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "FormField",
          "computed": true
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "control": {
        "type": {
          "name": "custom",
          "raw": "FormField.propTypes.control"
        },
        "required": false,
        "defaultValue": {
          "value": "Input",
          "computed": true
        },
        "docBlock": {
          "description": "A FormField control prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Sugar for <Form.Field control={Input} />.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        },
        {
          "title": "see",
          "description": "Input"
        }
      ]
    }
  },
  "src/collections/Form/FormRadio.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "FormField",
          "computed": true
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "control": {
        "type": {
          "name": "custom",
          "raw": "FormField.propTypes.control"
        },
        "required": false,
        "defaultValue": {
          "value": "Radio",
          "computed": true
        },
        "docBlock": {
          "description": "A FormField control prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Sugar for <Form.Field control={Radio} />.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        },
        {
          "title": "see",
          "description": "Radio"
        }
      ]
    }
  },
  "src/collections/Form/FormSelect.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "FormField",
          "computed": true
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "control": {
        "type": {
          "name": "custom",
          "raw": "FormField.propTypes.control"
        },
        "required": false,
        "defaultValue": {
          "value": "Select",
          "computed": true
        },
        "docBlock": {
          "description": "A FormField control prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Sugar for <Form.Field control={Select} />.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        },
        {
          "title": "see",
          "description": "Select"
        }
      ]
    }
  },
  "src/collections/Form/FormTextArea.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "FormField",
          "computed": true
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "control": {
        "type": {
          "name": "custom",
          "raw": "FormField.propTypes.control"
        },
        "required": false,
        "defaultValue": {
          "value": "TextArea",
          "computed": true
        },
        "docBlock": {
          "description": "A FormField control prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Sugar for <Form.Field control={TextArea} />.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        },
        {
          "title": "see",
          "description": "TextArea"
        }
      ]
    }
  },
  "src/collections/Menu/Menu.js": {
    "methods": [
      {
        "name": "handleItemOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "predefinedProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderItems",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "activeIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Index of the currently active item.",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "top",
                "bottom"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A menu may be attached to other content segments.",
          "tags": []
        }
      },
      "borderless": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu item or menu can have no borders.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Additional colors can be specified.",
          "tags": []
        }
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu can take up only the space necessary to fit its content.",
          "tags": []
        }
      },
      "defaultActiveIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Initial activeIndex value.",
          "tags": []
        }
      },
      "fixed": {
        "type": {
          "name": "enum",
          "value": [
            "left",
            "right",
            "bottom",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A menu can be fixed to a side of its context.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "right"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A menu can be floated.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A vertical menu may take the size of its container.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "labeled"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A menu may have just icons (bool) or labeled icons.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu may have its colors inverted to show greater contrast.",
          "tags": []
        }
      },
      "items": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand array of props for Menu.",
          "tags": []
        }
      },
      "onItemClick": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['children']),\n  PropTypes.func,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "onClick handler for MenuItem. Mutually exclusive with children.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All item props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "pagination": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A pagination menu is specially formatted to present links to pages of content.",
          "tags": []
        }
      },
      "pointing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu can point to show its relationship to nearby content.",
          "tags": []
        }
      },
      "secondary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu can adjust its appearance to de-emphasize its contents.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A menu can vary in size.",
          "tags": []
        }
      },
      "stackable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu can stack at mobile resolutions.",
          "tags": []
        }
      },
      "tabular": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "right"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A menu can be formatted to show tabs of information.",
          "tags": []
        }
      },
      "text": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu can be formatted for text content.",
          "tags": []
        }
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A vertical menu displays elements vertically.",
          "tags": []
        }
      },
      "widths": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A menu can have its items divided evenly.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A menu displays grouped navigation actions.",
      "tags": [
        {
          "title": "see",
          "description": "Dropdown"
        }
      ]
    }
  },
  "src/collections/Menu/MenuHeader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A menu item may include a header or may itself be a header.",
      "tags": []
    }
  },
  "src/collections/Menu/MenuItem.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu item can be active.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Additional colors can be specified.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu item can be disabled.",
          "tags": []
        }
      },
      "fitted": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "horizontally",
                "vertically"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A menu item or menu can remove element padding, vertically or horizontally.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu item may include a header or may itself be a header.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "custom",
              "raw": "customPropTypes.itemShorthand"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "MenuItem can be only icon.",
          "tags": []
        }
      },
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "docBlock": {
          "description": "MenuItem index inside Menu.",
          "tags": []
        }
      },
      "link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A menu item can be link.",
          "tags": []
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Internal name of the MenuItem.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click. When passed, the component will render as an `a`\ntag by default instead of a `div`.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A menu item can take left or right position.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A menu can contain an item.",
      "tags": []
    }
  },
  "src/collections/Menu/MenuMenu.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A sub menu can take left or right position.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A menu can contain a sub menu.",
      "tags": []
    }
  },
  "src/collections/Message/Message.js": {
    "methods": [
      {
        "name": "handleDismiss",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "bottom"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A message can be formatted to attach itself to other content.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A message can be formatted to be different colors.",
          "tags": []
        }
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message can only take up the width of its content.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message may be formatted to display a negative message. Same as `negative`.",
          "tags": []
        }
      },
      "floating": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message can float above content that it is related to.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for MessageHeader.",
          "tags": []
        }
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message can be hidden.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "custom",
              "raw": "customPropTypes.itemShorthand"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A message can contain an icon.",
          "tags": []
        }
      },
      "info": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message may be formatted to display information.",
          "tags": []
        }
      },
      "list": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Array shorthand items for the MessageList. Mutually exclusive with children.",
          "tags": []
        }
      },
      "negative": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message may be formatted to display a negative message. Same as `error`.",
          "tags": []
        }
      },
      "onDismiss": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "A message that the user can choose to hide.\nCalled when the user clicks the \"x\" icon. This also adds the \"x\" icon.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "positive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message may be formatted to display a positive message.  Same as `success`.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A message can have different sizes.",
          "tags": []
        }
      },
      "success": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message may be formatted to display a positive message.  Same as `positive`.",
          "tags": []
        }
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message can be set to visible to force itself to be shown.",
          "tags": []
        }
      },
      "warning": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A message may be formatted to display warning messages.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A message displays information that explains nearby content.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        }
      ]
    }
  },
  "src/collections/Message/MessageContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A message can contain a content.",
      "tags": []
    }
  },
  "src/collections/Message/MessageHeader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A message can contain a header.",
      "tags": []
    }
  },
  "src/collections/Message/MessageItem.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'li'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A message list can contain an item.",
      "tags": []
    }
  },
  "src/collections/Message/MessageList.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'ul'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "items": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand Message.Items.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A message can contain a list of items.",
      "tags": []
    }
  },
  "src/collections/Table/Table.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'table'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "top",
                "bottom"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Attach table to other content",
          "tags": []
        }
      },
      "basic": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                "very"
              ]
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table can reduce its complexity to increase readability.",
          "tags": []
        }
      },
      "celled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table may be divided each row into separate cells.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "collapsing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table can be collapsing, taking up only as much space as its rows.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table can be given a color to distinguish it from other tables.",
          "tags": []
        }
      },
      "columns": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table can specify its column count to divide its content evenly.",
          "tags": []
        }
      },
      "compact": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "very"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table may sometimes need to be more compact to make more rows visible at a time.",
          "tags": []
        }
      },
      "definition": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table may be formatted to emphasize a first column that defines a rows content.",
          "tags": []
        }
      },
      "fixed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table can use fixed a special faster form of table rendering that does not resize table cells based on content",
          "tags": []
        }
      },
      "footerRow": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for a TableRow to be placed within Table.Footer.",
          "tags": []
        }
      },
      "headerRow": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for a TableRow to be placed within Table.Header.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table's colors can be inverted.",
          "tags": []
        }
      },
      "padded": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "very"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table may sometimes need to be more padded for legibility.",
          "tags": []
        }
      },
      "renderBodyRow": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['children']),\n  customPropTypes.demand(['tableData']),\n  PropTypes.func,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.",
          "tags": [
            {
              "title": "param",
              "description": "An element in the `tableData` array.",
              "type": {
                "type": "AllLiteral"
              },
              "name": "data"
            },
            {
              "title": "param",
              "description": "The index of the current element in `tableData`.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "index"
            },
            {
              "title": "returns",
              "description": "Shorthand for a Table.Row.",
              "type": {
                "type": "AllLiteral"
              }
            }
          ]
        }
      },
      "selectable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table can have its rows appear selectable.",
          "tags": []
        }
      },
      "singleLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table can specify that its cell contents should remain on a single line and not wrap.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "small",
            "large"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table can also be small or large.",
          "tags": []
        }
      },
      "sortable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table may allow a user to sort contents by clicking on a table header.",
          "tags": []
        }
      },
      "stackable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table can specify how it stacks table content responsively.",
          "tags": []
        }
      },
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table can stripe alternate rows of content with a darker color to increase contrast.",
          "tags": []
        }
      },
      "structured": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table can be formatted to display complex structured data.",
          "tags": []
        }
      },
      "tableData": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['children']),\n  customPropTypes.demand(['renderBodyRow']),\n  PropTypes.array,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Data to be passed to the renderBodyRow function.",
          "tags": []
        }
      },
      "textAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "center",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table can adjust its text alignment.",
          "tags": []
        }
      },
      "unstackable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A table can specify how it stacks table content responsively.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table can adjust its text alignment.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A table displays a collections of data grouped into rows.",
      "tags": []
    }
  },
  "src/collections/Table/TableBody.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'tbody'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "",
      "tags": []
    }
  },
  "src/collections/Table/TableCell.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'td'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A cell can be active or selected by a user.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "collapsing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A cell can be collapsing so that it only uses as much space as required.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A cell can be disabled.",
          "tags": []
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A cell may call attention to an error or a negative value.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Add an Icon by name, props object, or pass an <Icon />",
          "tags": []
        }
      },
      "negative": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A cell may let a user know whether a value is bad.",
          "tags": []
        }
      },
      "positive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A cell may let a user know whether a value is good.",
          "tags": []
        }
      },
      "selectable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A cell can be selectable.",
          "tags": []
        }
      },
      "singleLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A cell can specify that its contents should remain on a single line and not wrap.",
          "tags": []
        }
      },
      "textAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "center",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table cell can adjust its text alignment.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table cell can adjust its text alignment.",
          "tags": []
        }
      },
      "warning": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A cell may warn a user.",
          "tags": []
        }
      },
      "width": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table can specify the width of individual columns independently.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A table row can have cells.",
      "tags": []
    }
  },
  "src/collections/Table/TableFooter.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'tfoot'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A table can have a footer.",
      "tags": []
    }
  },
  "src/collections/Table/TableHeader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'thead'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A definition table can have a full width header or footer, filling in the gap left by the first column.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A table can have a header.",
      "tags": []
    }
  },
  "src/collections/Table/TableHeaderCell.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'th'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "sorted": {
        "type": {
          "name": "enum",
          "value": [
            "ascending",
            "descending"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A header cell can be sorted in ascending or descending order.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A table can have a header cell.",
      "tags": []
    }
  },
  "src/collections/Table/TableRow.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'tr'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A row can be active or selected by a user.",
          "tags": []
        }
      },
      "cellAs": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'td'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "cells": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand array of props for TableCell.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A row can be disabled.",
          "tags": []
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A row may call attention to an error or a negative value.",
          "tags": []
        }
      },
      "negative": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A row may let a user know whether a value is bad.",
          "tags": []
        }
      },
      "positive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A row may let a user know whether a value is good.",
          "tags": []
        }
      },
      "textAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "center",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table row can adjust its text alignment.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A table row can adjust its vertical alignment.",
          "tags": []
        }
      },
      "warning": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A row may warn a user.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A table can have rows.",
      "tags": []
    }
  },
  "src/collections/Grid/Grid.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "celled": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "internally"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A grid can have rows divided into cells.",
          "tags": []
        }
      },
      "centered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A grid can have its columns centered.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "columns": {
        "type": {
          "name": "enum",
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen",
            "equal"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Represents column count per row in Grid.",
          "tags": []
        }
      },
      "container": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A grid can be combined with a container to use the available layout and alignment.",
          "tags": []
        }
      },
      "divided": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "vertically"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A grid can have dividers between its columns.",
          "tags": []
        }
      },
      "doubling": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A grid can double its column width on tablet and mobile sizes.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A grid's colors can be inverted.",
          "tags": []
        }
      },
      "padded": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "horizontally",
                "vertically"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A grid can preserve its vertical and horizontal gutters on first and last columns.",
          "tags": []
        }
      },
      "relaxed": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "very"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A grid can increase its gutters to allow for more negative space.",
          "tags": []
        }
      },
      "reversed": {
        "type": {
          "name": "enum",
          "value": [
            "computer",
            "computer vertically",
            "mobile",
            "mobile vertically",
            "tablet",
            "tablet vertically"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A grid can specify that its columns should reverse order at different device sizes.",
          "tags": []
        }
      },
      "stackable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A grid can have its columns stack on-top of each other after reaching mobile breakpoints.",
          "tags": []
        }
      },
      "stretched": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A grid can stretch its contents to take up the entire grid height.",
          "tags": []
        }
      },
      "textAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "center",
            "right",
            "justified"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A grid can specify its text alignment.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A grid can specify its vertical alignment to have all its columns vertically centered.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A grid is used to harmonize negative space in a layout.",
      "tags": []
    }
  },
  "src/collections/Grid/GridColumn.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A grid column can be colored.",
          "tags": []
        }
      },
      "computer": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A column can specify a width for a computer.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A column can sit flush against the left or right edge of a row.",
          "tags": []
        }
      },
      "largeScreen": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A column can specify a width for a large screen device.",
          "tags": []
        }
      },
      "mobile": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A column can specify a width for a mobile device.",
          "tags": []
        }
      },
      "only": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.onlyProp(SUI.VISIBILITY)"
        },
        "required": false,
        "docBlock": {
          "description": "A row can appear only for a specific device, or screen sizes.",
          "tags": []
        }
      },
      "stretched": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A column can stretch its contents to take up the entire grid or row height.",
          "tags": []
        }
      },
      "tablet": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A column can specify a width for a tablet device.",
          "tags": []
        }
      },
      "textAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "center",
            "right",
            "justified"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A column can specify its text alignment.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A column can specify its vertical alignment to have all its columns vertically centered.",
          "tags": []
        }
      },
      "widescreen": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A column can specify a width for a wide screen device.",
          "tags": []
        }
      },
      "width": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Represents width of column.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A column sub-component for Grid.",
      "tags": []
    }
  },
  "src/collections/Grid/GridRow.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "centered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A row can have its columns centered.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A grid row can be colored.",
          "tags": []
        }
      },
      "columns": {
        "type": {
          "name": "enum",
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen",
            "equal"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Represents column count per line in Row.",
          "tags": []
        }
      },
      "divided": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A row can have dividers between its columns.",
          "tags": []
        }
      },
      "only": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.onlyProp(SUI.VISIBILITY)"
        },
        "required": false,
        "docBlock": {
          "description": "A row can appear only for a specific device, or screen sizes.",
          "tags": []
        }
      },
      "reversed": {
        "type": {
          "name": "enum",
          "value": [
            "computer",
            "computer vertically",
            "mobile",
            "mobile vertically",
            "tablet",
            "tablet vertically"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A row can specify that its columns should reverse order at different device sizes.",
          "tags": []
        }
      },
      "stretched": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A row can stretch its contents to take up the entire column height.",
          "tags": []
        }
      },
      "textAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "center",
            "right",
            "justified"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A row can specify its text alignment.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A row can specify its vertical alignment to have all its columns vertically centered.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A row sub-component for Grid.",
      "tags": []
    }
  },
  "src/modules/Checkbox/Checkbox.js": {
    "methods": [
      {
        "name": "canToggle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeTabIndex",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleInputRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setIndeterminate",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether or not checkbox is checked.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "defaultChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "The initial value of checked.",
          "tags": []
        }
      },
      "defaultIndeterminate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether or not checkbox is indeterminate.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A checkbox can appear disabled and be unable to change states",
          "tags": []
        }
      },
      "fitted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Removes padding for a label. Auto applied when there is no label.",
          "tags": []
        }
      },
      "indeterminate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether or not checkbox is indeterminate.",
          "tags": []
        }
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "The text of the associated label element.",
          "tags": []
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "The HTML input name.",
          "tags": []
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the user attempts to change the checked state.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and proposed checked/indeterminate state.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the checkbox or label is clicked.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and current checked/indeterminate state.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onMouseDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the user presses down on the mouse.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and current checked/indeterminate state.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "radio": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  PropTypes.bool,\n  customPropTypes.disallow(['slider', 'toggle']),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Format as a radio element. This means it is an exclusive option.",
          "tags": []
        }
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A checkbox can be read-only and unable to change states.",
          "tags": []
        }
      },
      "slider": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  PropTypes.bool,\n  customPropTypes.disallow(['radio', 'toggle']),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Format to emphasize the current selection state.",
          "tags": []
        }
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A checkbox can receive focus.",
          "tags": []
        }
      },
      "toggle": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  PropTypes.bool,\n  customPropTypes.disallow(['radio', 'slider']),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Format to show an on or off choice.",
          "tags": []
        }
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            "checkbox",
            "radio"
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'checkbox'",
          "computed": false
        },
        "docBlock": {
          "description": "HTML input type, either checkbox or radio.",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "The HTML input value.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A checkbox allows a user to select a value from a small set of options, often binary.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        },
        {
          "title": "see",
          "description": "Radio"
        }
      ]
    }
  },
  "src/modules/Accordion/Accordion.js": {
    "methods": [
      {
        "name": "getInitialAutoControlledState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ exclusive }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTitleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "isIndexActive",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderChildren",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderPanels",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "activeIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "number"
              }
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Index of the currently active panel.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "defaultActiveIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "number"
              }
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Initial activeIndex value.",
          "tags": []
        }
      },
      "exclusive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Only allow one panel open at a time.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Format to take up the width of it's container.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Format for dark backgrounds.",
          "tags": []
        }
      },
      "onTitleClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when a panel title is clicked.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "The index of the clicked panel.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "index"
            }
          ]
        }
      },
      "panels": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['children']),\n  PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string,\n    active: PropTypes.bool,\n    title: customPropTypes.contentShorthand,\n    content: customPropTypes.contentShorthand,\n    onClick: PropTypes.func,\n  })),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Create simple accordion panels from an array of { text: <string>, content: <custom> } objects.\nObject can optionally define an `active` key to open/close the panel.\nObject can opitonally define a `key` key used for title and content nodes' keys.\nMutually exclusive with children.\nTODO: AccordionPanel should be a sub-component",
          "tags": []
        }
      },
      "styled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Adds some basic styling to accordion panels.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An accordion allows users to toggle the display of sections of content.",
      "tags": []
    }
  },
  "src/modules/Accordion/AccordionContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether or not the content is visible.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A content sub-component for Accordion component.",
      "tags": []
    }
  },
  "src/modules/Accordion/AccordionTitle.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether or not the title is in the open state.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      }
    },
    "docBlock": {
      "description": "A title sub-component for Accordion component.",
      "tags": []
    }
  },
  "src/modules/Dropdown/Dropdown.js": {
    "methods": [
      {
        "name": "getInitialAutoControlledState",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "closeOnChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "closeOnEscape",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "moveSelectionOnKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "openOnSpace",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "openOnArrow",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "makeSelectedItemActive",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectItemOnEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "removeItemOnBackspace",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "closeOnDocumentClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDocumentMouseUp",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleIconClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSearchChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "{ value }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getMenuOptions",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getSelectedItem",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getEnabledIndices",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "givenOptions",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getItemByValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getMenuItemIndexByValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          },
          {
            "name": "givenOptions",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getDropdownAriaOptions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getDropdownMenuAriaOptions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "clearSearchQuery",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "setValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setSelectedIndex",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          },
          {
            "name": "optionsProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleLabelClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "labelProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleLabelRemove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "labelProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "moveSelectionBy",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "offset",
            "type": null
          },
          {
            "name": "startIndex",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleIconOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "predefinedProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSearchRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSizerRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "computeSearchInputTabIndex",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeSearchInputWidth",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeTabIndex",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "scrollSelectedItemIntoView",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "open",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "close",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "toggle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderText",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderSearchInput",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderSearchSizer",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderLabels",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderOptions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderMenu",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "additionLabel": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "element"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'Add '",
          "computed": false
        },
        "docBlock": {
          "description": "Label prefixed to an option added by a user.",
          "tags": []
        }
      },
      "additionPosition": {
        "type": {
          "name": "enum",
          "value": [
            "top",
            "bottom"
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'top'",
          "computed": false
        },
        "docBlock": {
          "description": "Position of the `Add: ...` option in the dropdown list ('top' or 'bottom').",
          "tags": []
        }
      },
      "allowAdditions": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['options', 'selection', 'search']),\n  PropTypes.bool,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Allow user additions to the list of options (boolean).\nRequires the use of `selection`, `options` and `search`.",
          "tags": []
        }
      },
      "basic": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A Dropdown can reduce its complexity.",
          "tags": []
        }
      },
      "button": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Format the Dropdown to appear as a button.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['options', 'selection']),\n  customPropTypes.givenProps(\n    { children: PropTypes.any.isRequired },\n    PropTypes.element.isRequired,\n  ),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "closeOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Whether or not the menu should close when the dropdown is blurred.",
          "tags": []
        }
      },
      "closeOnChange": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether or not the menu should close when a value is selected from the dropdown.\nBy default, multiple selection dropdowns will remain open on change, while single\nselection dropdowns will close on change.",
          "tags": []
        }
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A compact dropdown has no minimum width.",
          "tags": []
        }
      },
      "defaultOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Initial value of open.",
          "tags": []
        }
      },
      "defaultSelectedLabel": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['multiple']),\n  PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Currently selected label in multi-select.",
          "tags": []
        }
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Initial value or value array if multiple.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A disabled dropdown menu or item does not allow user interaction.",
          "tags": []
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An errored dropdown can alert a user to a problem.",
          "tags": []
        }
      },
      "floating": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown menu can contain floated content.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can take the full width of its parent",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown menu can contain a header.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'dropdown'",
          "computed": false
        },
        "docBlock": {
          "description": "Shorthand for Icon.",
          "tags": []
        }
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can be formatted to appear inline in other content.",
          "tags": []
        }
      },
      "item": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can be formatted as a Menu item.",
          "tags": []
        }
      },
      "labeled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can be labeled.",
          "tags": []
        }
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can show that it is currently loading data.",
          "tags": []
        }
      },
      "minCharacters": {
        "type": {
          "name": "number"
        },
        "required": false,
        "defaultValue": {
          "value": "1",
          "computed": false
        },
        "docBlock": {
          "description": "The minimum characters for a search to begin showing results.",
          "tags": []
        }
      },
      "multiple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A selection dropdown can allow multiple selections.",
          "tags": []
        }
      },
      "noResultsMessage": {
        "type": {
          "name": "string"
        },
        "required": false,
        "defaultValue": {
          "value": "'No results found.'",
          "computed": false
        },
        "docBlock": {
          "description": "Message to display when there are no results.",
          "tags": []
        }
      },
      "onAddItem": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when a user adds a new item. Use this to update the options list.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and the new item's value.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on blur.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the user attempts to change the value.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and proposed value.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when a close event happens.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on focus.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onLabelClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when a multi-select label is clicked.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All label props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onMouseDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on mousedown.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when an open event happens.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onSearchChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on search input change.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "Current value of search input.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "value"
            }
          ]
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the dropdown menu is displayed.",
          "tags": []
        }
      },
      "openOnFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Whether or not the menu should open when the dropdown is focused.",
          "tags": []
        }
      },
      "options": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['children']),\n  PropTypes.arrayOf(PropTypes.shape(DropdownItem.propTypes)),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Array of Dropdown.Item props e.g. `{ text: '', value: '' }`",
          "tags": []
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Placeholder text.",
          "tags": []
        }
      },
      "pointing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "left",
                "right",
                "top",
                "top left",
                "top right",
                "bottom",
                "bottom left",
                "bottom right"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can be formatted so that its menu is pointing.",
          "tags": []
        }
      },
      "renderLabel": {
        "type": {
          "name": "func"
        },
        "required": false,
        "defaultValue": {
          "value": "({ text }) => text",
          "computed": false
        },
        "docBlock": {
          "description": "Mapped over the active items and returns shorthand for the active item Labels.\nOnly applies to `multiple` Dropdowns.",
          "tags": [
            {
              "title": "param",
              "description": "A currently active dropdown item.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "item"
            },
            {
              "title": "param",
              "description": "The current index.",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "index"
            },
            {
              "title": "param",
              "description": "The default props for an active item Label.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "defaultLabelProps"
            },
            {
              "title": "returns",
              "description": "Shorthand for a Label.",
              "type": {
                "type": "AllLiteral"
              }
            }
          ]
        }
      },
      "scrolling": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can have its menu scroll.",
          "tags": []
        }
      },
      "search": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A selection dropdown can allow a user to search through a large list of choices.\nPass a function here to replace the default search.",
          "tags": []
        }
      },
      "searchInput": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "array"
            },
            {
              "name": "node"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'text'",
          "computed": false
        },
        "docBlock": {
          "description": "A shorthand for a search input.",
          "tags": []
        }
      },
      "selectOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Define whether the highlighted item should be selected on blur.",
          "tags": []
        }
      },
      "selectedLabel": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['multiple']),\n  PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Currently selected label in multi-select.",
          "tags": []
        }
      },
      "selection": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['children']),\n  customPropTypes.demand(['options']),\n  PropTypes.bool,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can be used to select between choices in a form.",
          "tags": []
        }
      },
      "simple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A simple dropdown can open without Javascript.",
          "tags": []
        }
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can receive focus.",
          "tags": []
        }
      },
      "text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "The text displayed in the dropdown, usually for the active item.",
          "tags": []
        }
      },
      "trigger": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['selection', 'text']),\n  PropTypes.node,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Custom element to trigger the menu to become visible. Takes place of 'text'.",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Current value or value array if multiple. Creates a controlled component.",
          "tags": []
        }
      },
      "upward": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown can open upward.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A dropdown allows a user to select a value from a series of options.",
      "tags": [
        {
          "title": "see",
          "description": "Form"
        },
        {
          "title": "see",
          "description": "Select"
        },
        {
          "title": "see",
          "description": "Menu"
        }
      ]
    }
  },
  "src/modules/Dropdown/DropdownDivider.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A dropdown menu can contain dividers to separate related content.",
      "tags": []
    }
  },
  "src/modules/Dropdown/DropdownHeader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function)",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Icon.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A dropdown menu can contain a header.",
      "tags": []
    }
  },
  "src/modules/Dropdown/DropdownItem.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Style as the currently chosen item.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Additional text with less emphasis.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown item can be disabled.",
          "tags": []
        }
      },
      "flag": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Flag.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Icon.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Image.",
          "tags": []
        }
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for Label.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "The item currently selected by keyboard shortcut.\nThis is not the active item.",
          "tags": []
        }
      },
      "text": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Display text.",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Stored value.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An item sub-component for Dropdown component.",
      "tags": []
    }
  },
  "src/modules/Dropdown/DropdownMenu.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "scrolling": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dropdown menu can scroll.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A dropdown menu can contain a menu.",
      "tags": []
    }
  },
  "src/modules/Dropdown/DropdownSearchInput.js": {
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "inputRef": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "A ref handler for input.",
          "tags": []
        }
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An input can receive focus.",
          "tags": []
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "defaultValue": {
          "value": "'text'",
          "computed": false
        },
        "docBlock": {
          "description": "The HTML input type.",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Stored value.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A search item sub-component for Dropdown component.",
      "tags": []
    }
  },
  "src/modules/Dimmer/Dimmer.js": {
    "methods": [
      {
        "name": "handlePortalMount",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handlePortalUnmount",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleCenterRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An active dimmer will dim its parent container.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A disabled dimmer cannot be activated",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onClickOutside": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Handles click outside Dimmer's content, but inside Dimmer area.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dimmer can be formatted to have its colors inverted.",
          "tags": []
        }
      },
      "page": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dimmer can be formatted to be fixed to the page.",
          "tags": []
        }
      },
      "simple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dimmer can be controlled with simple prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A dimmer hides distractions to focus attention on particular content.",
      "tags": []
    }
  },
  "src/modules/Dimmer/DimmerDimmable.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "blurring": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A dimmable element can blur its contents.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "dimmed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the dim is displayed.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A dimmable sub-component for Dimmer.",
      "tags": []
    }
  },
  "src/modules/Modal/Modal.js": {
    "methods": [
      {
        "name": "getMountNode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleActionsOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "predefinedProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleIconOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "predefinedProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePortalMount",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePortalUnmount",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setPosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderContent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rest",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "actions": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "custom",
            "raw": "customPropTypes.itemShorthand"
          }
        },
        "required": false,
        "docBlock": {
          "description": "Elements to render as Modal action buttons.",
          "tags": []
        }
      },
      "basic": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A modal can reduce its complexity",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "closeIcon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "object"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Icon.",
          "tags": []
        }
      },
      "closeOnDimmerClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Whether or not the Modal should close when the dimmer is clicked.",
          "tags": []
        }
      },
      "closeOnDocumentClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "docBlock": {
          "description": "Whether or not the Modal should close when the document is clicked.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Simple text content for the Modal.",
          "tags": []
        }
      },
      "defaultOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Initial value of open.",
          "tags": []
        }
      },
      "dimmer": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "inverted",
                "blurring"
              ]
            }
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "A Modal can appear in a dimmer.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Modal displayed above the content in bold.",
          "tags": []
        }
      },
      "mountNode": {
        "type": {
          "name": "any"
        },
        "required": false,
        "docBlock": {
          "description": "The node where the modal should mount. Defaults to document.body.",
          "tags": []
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when a close event happens.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onMount": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the portal is mounted on the DOM.",
          "tags": []
        }
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when an open event happens.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onUnmount": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the portal is unmounted from the DOM.",
          "tags": []
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the Modal is displayed.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            "fullscreen",
            "large",
            "mini",
            "small",
            "tiny"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A modal can vary in size",
          "tags": []
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "docBlock": {
          "description": "Custom styles.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A modal displays content that temporarily blocks interactions with the main view of a site.",
      "tags": [
        {
          "title": "see",
          "description": "Confirm"
        },
        {
          "title": "see",
          "description": "Portal"
        }
      ]
    }
  },
  "src/modules/Modal/ModalActions.js": {
    "methods": [
      {
        "name": "handleButtonOverrides",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "predefinedProps",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "actions": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['children']),\n  PropTypes.arrayOf(customPropTypes.itemShorthand),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Elements to render as Modal action buttons.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "onActionClick": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['children']),\n  PropTypes.func,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "onClick handler for an action. Mutually exclusive with children.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All item props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      }
    },
    "docBlock": {
      "description": "A modal can contain a row of actions.",
      "tags": []
    }
  },
  "src/modules/Modal/ModalContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A modal can contain image content.",
          "tags": []
        }
      },
      "scrolling": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A modal can use the entire size of the screen.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A modal can contain content.",
      "tags": []
    }
  },
  "src/modules/Modal/ModalDescription.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A modal can have a header.",
      "tags": []
    }
  },
  "src/modules/Modal/ModalHeader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A modal can have a header.",
      "tags": []
    }
  },
  "src/modules/Embed/Embed.js": {
    "methods": [
      {
        "name": "getSrc",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderEmbed",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An embed can be active.",
          "tags": []
        }
      },
      "aspectRatio": {
        "type": {
          "name": "enum",
          "value": [
            "4:3",
            "16:9",
            "21:9"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "An embed can specify an alternative aspect ratio.",
          "tags": []
        }
      },
      "autoplay": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['source']),\n  PropTypes.bool,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Setting to true or false will force autoplay.",
          "tags": []
        }
      },
      "brandedUI": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['source']),\n  PropTypes.bool,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Whether to show networks branded UI like title cards, or after video calls to action.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['source']),\n  PropTypes.string,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Specifies a default chrome color with Vimeo or YouTube.",
          "tags": []
        }
      },
      "defaultActive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Initial value of active.",
          "tags": []
        }
      },
      "hd": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['source']),\n  PropTypes.bool,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Whether to show networks branded UI like title cards, or after video calls to action.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "defaultValue": {
          "value": "'video play'",
          "computed": false
        },
        "docBlock": {
          "description": "Specifies an icon to use with placeholder content.",
          "tags": []
        }
      },
      "id": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['source']),\n  PropTypes.string,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Specifies an id for source.",
          "tags": []
        }
      },
      "iframe": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['source']),\n  customPropTypes.itemShorthand,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for HTML iframe.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Сalled on click.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and proposed value.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "A placeholder image for embed.",
          "tags": []
        }
      },
      "source": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['sourceUrl']),\n  PropTypes.oneOf(['youtube', 'vimeo']),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Specifies a source to use.",
          "tags": []
        }
      },
      "url": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['source']),\n  PropTypes.string,\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Specifies a url to use for embed.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An embed displays content from other websites like YouTube videos or Google Maps.",
      "tags": []
    }
  },
  "src/modules/Popup/Popup.js": {
    "methods": [
      {
        "name": "computePopupStyle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "positions",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "isStyleInViewport",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "style",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setPopupStyle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getPortalProps",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "hideOnScroll",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePortalMount",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePortalUnmount",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePopupRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "popupRef",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "basic": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Display the popup without the pointing arrow.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Simple text content for the popover.",
          "tags": []
        }
      },
      "flowing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A flowing Popup has no maximum width and continues to flow to fit its content.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Header displayed above the content in bold.",
          "tags": []
        }
      },
      "hideOnScroll": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Hide the Popup when scrolling the window.",
          "tags": []
        }
      },
      "hoverable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether the popup should not close on hover.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Invert the colors of the Popup.",
          "tags": []
        }
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "docBlock": {
          "description": "Horizontal offset in pixels to be applied to the Popup.",
          "tags": []
        }
      },
      "on": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                "hover",
                "click",
                "focus"
              ]
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "enum",
                "value": [
                  {
                    "value": "'hover'",
                    "computed": false
                  },
                  {
                    "value": "'click'",
                    "computed": false
                  },
                  {
                    "value": "'focus'",
                    "computed": false
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'hover'",
          "computed": false
        },
        "docBlock": {
          "description": "Events triggering the popup.",
          "tags": []
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when a close event happens.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onMount": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the portal is mounted on the DOM.",
          "tags": []
        }
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when an open event happens.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onUnmount": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the portal is unmounted from the DOM.",
          "tags": []
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            "top left",
            "top right",
            "bottom right",
            "bottom left",
            "right center",
            "left center",
            "top center",
            "bottom center"
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'top left'",
          "computed": false
        },
        "docBlock": {
          "description": "Position for the popover.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "huge"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Popup size.",
          "tags": []
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "docBlock": {
          "description": "Custom Popup style.",
          "tags": []
        }
      },
      "trigger": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Element to be rendered in-place where the popup is defined.",
          "tags": []
        }
      },
      "wide": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "very"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Popup width.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A Popup displays additional information on top of a page.",
      "tags": []
    }
  },
  "src/modules/Popup/PopupContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "The content of the Popup",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Classes to add to the Popup content className.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A PopupContent displays the content body of a Popover.",
      "tags": []
    }
  },
  "src/modules/Popup/PopupHeader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A PopupHeader displays a header in a Popover.",
      "tags": []
    }
  },
  "src/modules/Progress/Progress.js": {
    "methods": [
      {
        "name": "calculatePercent",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getPercent",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isAutoSuccess",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderLabel",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderProgress",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "percent",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can show activity.",
          "tags": []
        }
      },
      "attached": {
        "type": {
          "name": "enum",
          "value": [
            "top",
            "bottom"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can attach to and show the progress of an element (i.e. Card or Segment).",
          "tags": []
        }
      },
      "autoSuccess": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether success state should automatically trigger when progress completes.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can have different colors.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar be disabled.",
          "tags": []
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can show a error state.",
          "tags": []
        }
      },
      "indicating": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An indicating progress bar visually indicates the current level of progress of a task.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can have its colors inverted.",
          "tags": []
        }
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Can be set to either to display progress as percent or ratio.",
          "tags": []
        }
      },
      "percent": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['total', 'value']),\n  PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "Current percent complete.",
          "tags": []
        }
      },
      "precision": {
        "type": {
          "name": "number"
        },
        "required": false,
        "docBlock": {
          "description": "Decimal point precision for calculated progress.",
          "tags": []
        }
      },
      "progress": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "percent",
                "ratio"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can contain a text value indicating current progress.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "tiny",
            "small",
            "medium",
            "large",
            "big"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can vary in size.",
          "tags": []
        }
      },
      "success": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can show a success state.",
          "tags": []
        }
      },
      "total": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['value']),\n  customPropTypes.disallow(['percent']),\n  PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "For use with value. Together, these will calculate the percent. Mutually excludes percent.",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.demand(['total']),\n  customPropTypes.disallow(['percent']),\n  PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "For use with total. Together, these will calculate the percent. Mutually excludes percent.",
          "tags": []
        }
      },
      "warning": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can show a warning state.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A progress bar shows the progression of a task.",
      "tags": []
    }
  },
  "src/modules/Rating/Rating.js": {
    "methods": [
      {
        "name": "handleIconClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "{ index }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleIconMouseEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "{ index }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseLeave",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "...args",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "clearable": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "auto"
              ]
            }
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        },
        "docBlock": {
          "description": "You can clear the rating by clicking on the current start rating.\nBy default a rating will be only clearable if there is 1 icon.\nSetting to `true`/`false` will allow or disallow a user to clear their rating.",
          "tags": []
        }
      },
      "defaultRating": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "The initial rating value.",
          "tags": []
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "You can disable or enable interactive rating.  Makes a read-only rating.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "enum",
          "value": [
            "star",
            "heart"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A rating can use a set of star or heart icons.",
          "tags": []
        }
      },
      "maxRating": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "1",
          "computed": false
        },
        "docBlock": {
          "description": "The total number of icons.",
          "tags": []
        }
      },
      "onRate": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called after user selects a new rating.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and proposed rating.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "rating": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "The current number of active icons.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A progress bar can vary in size.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A rating indicates user interest in content.",
      "tags": []
    }
  },
  "src/modules/Rating/RatingIcon.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'i'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Indicates activity of an icon.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "docBlock": {
          "description": "An index of icon inside Rating.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onKeyUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on keyup.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onMouseEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on mouseenter.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Indicates selection of an icon.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An internal icon sub-component for Rating component",
      "tags": []
    }
  },
  "src/modules/Search/Search.js": {
    "methods": [
      {
        "name": "handleResultSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "result",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelectionChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "closeOnEscape",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "moveSelectionOnKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectItemOnEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "closeOnDocumentClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDocumentMouseUp",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleInputClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "{ id }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSearchChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getFlattenedResults",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getSelectedResult",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "moveSelectionBy",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "offset",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "scrollSelectedItemIntoView",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "tryOpen",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "currentValue",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "open",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "close",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderSearchInput",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rest",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderNoResults",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderResult",
        "docblock": "Offset is needed for determining the active item for results within a\ncategory. Since the index is reset to 0 for each new category, an offset\nmust be passed in.",
        "modifiers": [],
        "params": [
          {
            "name": "{ childKey, ...result }"
          },
          {
            "name": "index"
          },
          {
            "name": "_array"
          },
          {
            "name": "offset"
          }
        ],
        "returns": null,
        "description": "Offset is needed for determining the active item for results within a\ncategory. Since the index is reset to 0 for each new category, an offset\nmust be passed in."
      },
      {
        "name": "renderResults",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderCategories",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderMenuContent",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderResultsMenu",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "defaultOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Initial value of open.",
          "tags": []
        }
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Initial value.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'search'",
          "computed": false
        },
        "docBlock": {
          "description": "Shorthand for Icon.",
          "tags": []
        }
      },
      "minCharacters": {
        "type": {
          "name": "number"
        },
        "required": false,
        "defaultValue": {
          "value": "1",
          "computed": false
        },
        "docBlock": {
          "description": "Minimum characters to query for results",
          "tags": []
        }
      },
      "noResultsDescription": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Additional text for \"No Results\" message with less emphasis.",
          "tags": []
        }
      },
      "noResultsMessage": {
        "type": {
          "name": "node"
        },
        "required": false,
        "defaultValue": {
          "value": "'No results found.'",
          "computed": false
        },
        "docBlock": {
          "description": "Message to display when there are no results.",
          "tags": []
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the results menu is displayed.",
          "tags": []
        }
      },
      "results": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "shape",
                "value": "SearchResult.propTypes",
                "computed": true
              }
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "One of:\n- array of Search.Result props e.g. `{ title: '', description: '' }` or\n- object of categories e.g. `{ name: '', results: [{ title: '', description: '' }]`",
          "tags": []
        }
      },
      "selectFirstResult": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether the search should automatically select the first result after searching.",
          "tags": []
        }
      },
      "showNoResults": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Whether a \"no results\" message should be shown if no results are found.",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Current value of the search input. Creates a controlled component.",
          "tags": []
        }
      },
      "categoryRenderer": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Renders the SearchCategory contents.",
          "tags": [
            {
              "title": "param",
              "description": "The SearchCategory props object.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "props"
            },
            {
              "title": "returns",
              "description": "Renderable SearchCategory contents.",
              "type": {
                "type": "AllLiteral"
              }
            }
          ]
        }
      },
      "resultRenderer": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Renders the SearchResult contents.",
          "tags": [
            {
              "title": "param",
              "description": "The SearchResult props object.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "props"
            },
            {
              "title": "returns",
              "description": "Renderable SearchResult contents.",
              "type": {
                "type": "AllLiteral"
              }
            }
          ]
        }
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on blur.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on focus.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onMouseDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on mousedown.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onResultSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when a result is selected.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onSearchChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on search input change.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props, includes current value of search input.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called when the active selection index is changed.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "aligned": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "A search can have its results aligned to its left or right container edge.",
          "tags": []
        }
      },
      "category": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A search can display results from remote content ordered by categories.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A search can have its results take up the width of its container.",
          "tags": []
        }
      },
      "input": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "defaultValue": {
          "value": "'text'",
          "computed": false
        },
        "docBlock": {
          "description": "A search input can take up the width of its container.",
          "tags": []
        }
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A search can show a loading indicator.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A search can have different sizes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A search module allows a user to query for results from a selection of data",
      "tags": []
    }
  },
  "src/modules/Search/SearchCategory.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "The item currently selected by keyboard shortcut.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Display name.",
          "tags": []
        }
      },
      "renderer": {
        "type": {
          "name": "func"
        },
        "required": false,
        "defaultValue": {
          "value": "({ name }) => name",
          "computed": false
        },
        "docBlock": {
          "description": "Renders the category contents.",
          "tags": [
            {
              "title": "param",
              "description": "The SearchCategory props object.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "props"
            },
            {
              "title": "returns",
              "description": "Renderable category contents.",
              "type": {
                "type": "AllLiteral"
              }
            }
          ]
        }
      },
      "results": {
        "type": {
          "name": "array"
        },
        "required": false,
        "docBlock": {
          "description": "Array of Search.Result props.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "",
      "tags": []
    }
  },
  "src/modules/Search/SearchResult.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "The item currently selected by keyboard shortcut.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional text with less emphasis.",
          "tags": []
        }
      },
      "id": {
        "type": {
          "name": "number"
        },
        "required": false,
        "docBlock": {
          "description": "A unique identifier.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Add an image to the item.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "price": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Customized text for price.",
          "tags": []
        }
      },
      "renderer": {
        "type": {
          "name": "func"
        },
        "required": false,
        "defaultValue": {
          "value": "({ image, price, title, description }) => [\n  image && <div key='image' className='image'>{createHTMLImage(image)}</div>,\n  <div key='content' className='content'>\n    {price && <div className='price'>{price}</div>}\n    {title && <div className='title'>{title}</div>}\n    {description && <div className='description'>{description}</div>}\n  </div>,\n]",
          "computed": false
        },
        "docBlock": {
          "description": "Renders the result contents.",
          "tags": [
            {
              "title": "param",
              "description": "The SearchResult props object.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "props"
            },
            {
              "title": "returns",
              "description": "Renderable result contents.",
              "type": {
                "type": "AllLiteral"
              }
            }
          ]
        }
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Display title.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "",
      "tags": []
    }
  },
  "src/modules/Search/SearchResults.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "",
      "tags": []
    }
  },
  "src/modules/Sidebar/Sidebar.js": {
    "methods": [
      {
        "name": "startAnimating",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "duration",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "animation": {
        "type": {
          "name": "enum",
          "value": [
            "overlay",
            "push",
            "scale down",
            "uncover",
            "slide out",
            "slide along"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Animation style.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "defaultVisible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Initial value of visible.",
          "tags": []
        }
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            "top",
            "right",
            "bottom",
            "left"
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'left'",
          "computed": false
        },
        "docBlock": {
          "description": "Direction the sidebar should appear on.",
          "tags": []
        }
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the sidebar is visible on the page.",
          "tags": []
        }
      },
      "width": {
        "type": {
          "name": "enum",
          "value": [
            "very thin",
            "thin",
            "wide",
            "very wide"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Sidebar width.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A sidebar hides additional content beside a page.",
      "tags": []
    }
  },
  "src/modules/Sidebar/SidebarPushable.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A pushable sub-component for Sidebar.",
      "tags": []
    }
  },
  "src/modules/Sidebar/SidebarPusher.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "dimmed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Controls whether or not the dim is displayed.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A pushable sub-component for Sidebar.",
      "tags": []
    }
  },
  "src/modules/Sticky/Sticky.js": {
    "methods": [
      {
        "name": "update",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleUpdate",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "assignRects",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeStyle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isOversized",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "didReachContextBottom",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "didReachStartingPoint",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "didTouchScreenTop",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "didTouchScreenBottom",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "pushing",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "pushing",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "stick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "unstick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "stickToContextBottom",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "stickToContextTop",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "stickToScreenBottom",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "stickToScreenTop",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleStickyRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTriggerRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "c",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "bottomOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "docBlock": {
          "description": "Offset in pixels from the bottom of the screen when fixing element to viewport.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "context": {
        "type": {
          "name": "object"
        },
        "required": false,
        "docBlock": {
          "description": "Context which sticky element should stick to.",
          "tags": []
        }
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "docBlock": {
          "description": "Offset in pixels from the top of the screen when fixing element to viewport.",
          "tags": []
        }
      },
      "onBottom": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Callback when element is bound to bottom of parent container.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onStick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Callback when element is fixed to page.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onTop": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Callback when element is bound to top of parent container.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "onUnstick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Callback when element is unfixed from page.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "pushing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Whether element should be \"pushed\" by the viewport, attaching to the bottom of the screen when scrolling up.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Sticky content stays fixed to the browser viewport while another column of content is visible on the page.",
      "tags": []
    }
  },
  "src/modules/Tab/Tab.js": {
    "methods": [
      {
        "name": "getInitialAutoControlledState",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleItemClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "{ index }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderMenu",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "defaultActiveIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "The initial activeIndex.",
          "tags": []
        }
      },
      "activeIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Index of the currently active tab.",
          "tags": []
        }
      },
      "menu": {
        "type": {
          "name": "object"
        },
        "required": false,
        "defaultValue": {
          "value": "{ attached: true, tabular: true }",
          "computed": false
        },
        "docBlock": {
          "description": "Shorthand props for the Menu.",
          "tags": []
        }
      },
      "onTabChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on tab change.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props and proposed new activeIndex.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            },
            {
              "title": "param",
              "description": "The new proposed activeIndex.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data.activeIndex"
            }
          ]
        }
      },
      "panes": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "menuItem": {
                "name": "custom",
                "raw": "customPropTypes.itemShorthand",
                "required": false
              },
              "render": {
                "name": "func",
                "required": true
              }
            }
          }
        },
        "required": false,
        "docBlock": {
          "description": "Array of objects describing each Menu.Item and Tab.Pane:\n{\nmenuItem: 'Home',\nrender: () => <Tab.Pane>Welcome!</Tab.Pane>\n}",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A Tab is a hidden section of content activated by a Menu.",
      "tags": [
        {
          "title": "see",
          "description": "Menu"
        },
        {
          "title": "see",
          "description": "Segment"
        }
      ]
    }
  },
  "src/modules/Tab/TabPane.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "Segment",
          "computed": true
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A Tab.Pane can display a loading indicator.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A tab pane holds the content of a tab.",
      "tags": []
    }
  },
  "src/modules/Transition/Transition.js": {
    "methods": [
      {
        "name": "handleStart",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleComplete",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "updateStatus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeClasses",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeCompletedStatus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeInitialStatuses",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeNextStatus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "computeStatuses",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "computeStyle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "animation": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "scale",
            "fade",
            "fade up",
            "fade down",
            "fade left",
            "fade right",
            "horizontal flip",
            "vertical flip",
            "drop",
            "fly left",
            "fly right",
            "fly up",
            "fly down",
            "swing left",
            "swing right",
            "swing up",
            "swing down",
            "browse",
            "browse right",
            "slide down",
            "slide up",
            "slide right",
            "jiggle",
            "flash",
            "shake",
            "pulse",
            "tada",
            "bounce"
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'fade'",
          "computed": false
        },
        "docBlock": {
          "description": "Named animation event to used. Must be defined in CSS.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "defaultValue": {
          "value": "500",
          "computed": false
        },
        "docBlock": {
          "description": "Duration of the CSS transition animation in milliseconds.",
          "tags": []
        }
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Show the component; triggers the enter or exit animation.",
          "tags": []
        }
      },
      "mountOnShow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "docBlock": {
          "description": "Wait until the first \"enter\" transition to mount the component (add it to the DOM).",
          "tags": []
        }
      },
      "onComplete": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Callback on each transition that changes visibility to shown.",
          "tags": []
        }
      },
      "onHide": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Callback on each transition that changes visibility to hidden.",
          "tags": []
        }
      },
      "onShow": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Callback on each transition that changes visibility to shown.",
          "tags": []
        }
      },
      "onStart": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Callback on animation start.",
          "tags": []
        }
      },
      "reactKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "React's key of the element.",
          "tags": []
        }
      },
      "transitionOnMount": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "docBlock": {
          "description": "Run the enter animation when the component mounts, if it is initially shown.",
          "tags": []
        }
      },
      "unmountOnHide": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "docBlock": {
          "description": "Unmount the component (remove it from the DOM) when it is not shown.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A transition is an animation usually used to move content in or out of view.",
      "tags": []
    }
  },
  "src/modules/Transition/TransitionGroup.js": {
    "methods": [
      {
        "name": "handleOnHide",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nothing",
            "type": null
          },
          {
            "name": "childProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "wrapChild",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "child",
            "type": null
          },
          {
            "name": "transitionOnMount",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "animation": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "scale",
            "fade",
            "fade up",
            "fade down",
            "fade left",
            "fade right",
            "horizontal flip",
            "vertical flip",
            "drop",
            "fly left",
            "fly right",
            "fly up",
            "fly down",
            "swing left",
            "swing right",
            "swing up",
            "swing down",
            "browse",
            "browse right",
            "slide down",
            "slide up",
            "slide right",
            "jiggle",
            "flash",
            "shake",
            "pulse",
            "tada",
            "bounce"
          ]
        },
        "required": false,
        "defaultValue": {
          "value": "'fade'",
          "computed": false
        },
        "docBlock": {
          "description": "Named animation event to used. Must be defined in CSS.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "defaultValue": {
          "value": "500",
          "computed": false
        },
        "docBlock": {
          "description": "Duration of the CSS transition animation in milliseconds.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A Transition.Group animates children as they mount and unmount.",
      "tags": []
    }
  },
  "src/views/Advertisement/Advertisement.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "centered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Center the advertisement.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "test": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Text to be displayed on the advertisement.",
          "tags": []
        }
      },
      "unit": {
        "type": {
          "name": "enum",
          "value": [
            "medium rectangle",
            "large rectangle",
            "vertical rectangle",
            "small rectangle",
            "mobile banner",
            "banner",
            "vertical banner",
            "top banner",
            "half banner",
            "button",
            "square button",
            "small button",
            "skyscraper",
            "wide skyscraper",
            "leaderboard",
            "large leaderboard",
            "mobile leaderboard",
            "billboard",
            "panorama",
            "netboard",
            "half page",
            "square",
            "small square"
          ]
        },
        "required": true,
        "docBlock": {
          "description": "Varies the size of the advertisement.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An ad displays third-party promotional content.",
      "tags": []
    }
  },
  "src/views/Card/Card.js": {
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "centered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A Card can center itself inside its container.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A Card can be formatted to display different colors.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for CardDescription.",
          "tags": []
        }
      },
      "extra": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content of CardContent.",
          "tags": []
        }
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A Card can be formatted to take up the width of its container.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for CardHeader.",
          "tags": []
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Render as an `a` tag instead of a `div` and adds the href attribute.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "A card can contain an Image component.",
          "tags": []
        }
      },
      "link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A card can be formatted to link to other content.",
          "tags": []
        }
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for CardMeta.",
          "tags": []
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "docBlock": {
          "description": "Called on click. When passed, the component renders as an `a`\ntag by default instead of a `div`.",
          "tags": [
            {
              "title": "param",
              "description": "React's original SyntheticEvent.",
              "type": {
                "type": "NameExpression",
                "name": "SyntheticEvent"
              },
              "name": "event"
            },
            {
              "title": "param",
              "description": "All props.",
              "type": {
                "type": "NameExpression",
                "name": "object"
              },
              "name": "data"
            }
          ]
        }
      },
      "raised": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A Card can be formatted to raise above the page.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A card displays site content in a manner similar to a playing card.",
      "tags": []
    }
  },
  "src/views/Card/CardContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for CardDescription.",
          "tags": []
        }
      },
      "extra": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A card can contain extra content meant to be formatted separately from the main content.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for CardHeader.",
          "tags": []
        }
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for CardMeta.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A card can contain blocks of content or extra content meant to be formatted separately from the main content.",
      "tags": []
    }
  },
  "src/views/Card/CardDescription.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A card can contain a description with one or more paragraphs.",
      "tags": []
    }
  },
  "src/views/Card/CardGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "doubling": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A group of cards can double its column width for mobile.",
          "tags": []
        }
      },
      "items": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand array of props for Card.",
          "tags": []
        }
      },
      "itemsPerRow": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A group of cards can set how many cards should exist in a row.",
          "tags": []
        }
      },
      "stackable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A group of cards can automatically stack rows to a single columns on mobile devices.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A group of cards.",
      "tags": []
    }
  },
  "src/views/Card/CardHeader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A card can contain a header.",
      "tags": []
    }
  },
  "src/views/Card/CardMeta.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A card can contain content metadata.",
      "tags": []
    }
  },
  "src/views/Comment/Comment.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "collapsed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Comment can be collapsed, or hidden from view.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A comment displays user feedback to site content.",
      "tags": []
    }
  },
  "src/views/Comment/CommentAction.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'a'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Style as the currently active action.",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A comment can contain an action.",
      "tags": []
    }
  },
  "src/views/Comment/CommentActions.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A comment can contain an list of actions a user may perform related to this comment.",
      "tags": []
    }
  },
  "src/views/Comment/CommentAuthor.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A comment can contain an author.",
      "tags": []
    }
  },
  "src/views/Comment/CommentAvatar.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Specifies the URL of the image.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A comment can contain an image or avatar.",
      "tags": []
    }
  },
  "src/views/Comment/CommentContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A comment can contain content.",
      "tags": []
    }
  },
  "src/views/Comment/CommentGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "collapsed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Comments can be collapsed, or hidden from view.",
          "tags": []
        }
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Comments can hide extra information unless a user shows intent to interact with a comment.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "big",
            "huge",
            "massive"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Comments can have different sizes.",
          "tags": []
        }
      },
      "threaded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A comment list can be threaded to showing the relationship between conversations.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "Comments can be grouped.",
      "tags": []
    }
  },
  "src/views/Comment/CommentMetadata.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A comment can contain metadata about the comment, an arbitrary amount of metadata may be defined.",
      "tags": []
    }
  },
  "src/views/Comment/CommentText.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A comment can contain text.",
      "tags": []
    }
  },
  "src/views/Feed/Feed.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "events": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand array of props for FeedEvent.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "small",
            "large"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A feed can have different sizes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A feed presents user activity chronologically.",
      "tags": []
    }
  },
  "src/views/Feed/FeedContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "date": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "An event can contain a date.",
          "tags": []
        }
      },
      "extraImages": {
        "type": {
          "name": "custom",
          "raw": "FeedExtra.propTypes.images"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedExtra with images.",
          "tags": []
        }
      },
      "extraText": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedExtra with text.",
          "tags": []
        }
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedMeta.",
          "tags": []
        }
      },
      "summary": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedSummary.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "",
      "tags": []
    }
  },
  "src/views/Feed/FeedDate.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An event or an event summary can contain a date.",
      "tags": []
    }
  },
  "src/views/Feed/FeedEvent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedContent.",
          "tags": []
        }
      },
      "date": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedDate.",
          "tags": []
        }
      },
      "extraImages": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedExtra with images.",
          "tags": []
        }
      },
      "extraText": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedExtra with content.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "An event can contain icon label.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "An event can contain image label.",
          "tags": []
        }
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedMeta.",
          "tags": []
        }
      },
      "summary": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedSummary.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A feed contains an event.",
      "tags": []
    }
  },
  "src/views/Feed/FeedExtra.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "images": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.every([\n  customPropTypes.disallow(['text']),\n  PropTypes.oneOfType([\n    PropTypes.bool,\n    customPropTypes.collectionShorthand,\n  ]),\n])"
        },
        "required": false,
        "docBlock": {
          "description": "An event can contain additional information like a set of images.",
          "tags": []
        }
      },
      "text": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An event can contain additional text information.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A feed can contain an extra content.",
      "tags": []
    }
  },
  "src/views/Feed/FeedLabel.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "An event can contain icon label.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "An event can contain image label.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An event can contain an image or icon label.",
      "tags": []
    }
  },
  "src/views/Feed/FeedLike.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'a'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "icon": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for icon. Mutually exclusive with children.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A feed can contain a like element.",
      "tags": []
    }
  },
  "src/views/Feed/FeedMeta.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "like": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedLike.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A feed can contain a meta.",
      "tags": []
    }
  },
  "src/views/Feed/FeedSummary.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "date": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedDate.",
          "tags": []
        }
      },
      "user": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for FeedUser.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A feed can contain a summary.",
      "tags": []
    }
  },
  "src/views/Feed/FeedUser.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "defaultValue": {
          "value": "'a'",
          "computed": false
        },
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A feed can contain a user element.",
      "tags": []
    }
  },
  "src/views/Item/Item.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemContent component.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemDescription component.",
          "tags": []
        }
      },
      "extra": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemExtra component.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemHeader component.",
          "tags": []
        }
      },
      "image": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemImage component.",
          "tags": []
        }
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemMeta component.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An item view presents large collections of site content for display.",
      "tags": []
    }
  },
  "src/views/Item/ItemContent.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      },
      "description": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemDescription component.",
          "tags": []
        }
      },
      "extra": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemExtra component.",
          "tags": []
        }
      },
      "header": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemHeader component.",
          "tags": []
        }
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.itemShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for ItemMeta component.",
          "tags": []
        }
      },
      "verticalAlign": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "bottom",
            "middle",
            "top"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "Content can specify its vertical alignment.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An item can contain content.",
      "tags": []
    }
  },
  "src/views/Item/ItemDescription.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An item can contain a description with a single or multiple paragraphs.",
      "tags": []
    }
  },
  "src/views/Item/ItemExtra.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An item can contain extra content meant to be formatted separately from the main content.",
      "tags": []
    }
  },
  "src/views/Item/ItemGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "divided": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Items can be divided to better distinguish between grouped content.",
          "tags": []
        }
      },
      "items": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand array of props for Item.",
          "tags": []
        }
      },
      "link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "An item can be formatted so that the entire contents link to another page.",
          "tags": []
        }
      },
      "relaxed": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "enum",
              "value": [
                "very"
              ]
            }
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A group of items can relax its padding to provide more negative space.",
          "tags": []
        }
      },
      "unstackable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Prevent items from stacking on mobile.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A group of items.",
      "tags": []
    }
  },
  "src/views/Item/ItemHeader.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An item can contain a header.",
      "tags": []
    }
  },
  "src/views/Item/ItemImage.js": {
    "methods": [],
    "props": {
      "size": {
        "type": {
          "name": "custom",
          "raw": "Image.propTypes.size"
        },
        "required": false,
        "docBlock": {
          "description": "An image may appear at different sizes.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An item can contain an image.",
      "tags": []
    }
  },
  "src/views/Item/ItemMeta.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "content": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "An item can contain content metadata.",
      "tags": []
    }
  },
  "src/views/Statistic/Statistic.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A statistic can be formatted to be different colors.",
          "tags": []
        }
      },
      "floated": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "left",
            "right"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A statistic can sit to the left or right of other content.",
          "tags": []
        }
      },
      "horizontal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A statistic can present its measurement horizontally.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A statistic can be formatted to fit on a dark background.",
          "tags": []
        }
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Label content of the Statistic.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "huge"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A statistic can vary in size.",
          "tags": []
        }
      },
      "text": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Format the StatisticValue with smaller font size to fit nicely beside number values.",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Value content of the Statistic.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A statistic emphasizes the current value of an attribute.",
      "tags": []
    }
  },
  "src/views/Statistic/StatisticGroup.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "red",
            "orange",
            "yellow",
            "olive",
            "green",
            "teal",
            "blue",
            "violet",
            "purple",
            "pink",
            "brown",
            "grey",
            "black"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A statistic group can be formatted to be different colors.",
          "tags": []
        }
      },
      "horizontal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A statistic group can present its measurement horizontally.",
          "tags": []
        }
      },
      "inverted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "A statistic group can be formatted to fit on a dark background.",
          "tags": []
        }
      },
      "items": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.collectionShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Array of props for Statistic.",
          "tags": []
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "mini",
            "tiny",
            "small",
            "large",
            "huge"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A statistic group can vary in size.",
          "tags": []
        }
      },
      "widths": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "ten",
            "eleven",
            "twelve",
            "thirteen",
            "fourteen",
            "fifteen",
            "sixteen"
          ]
        },
        "required": false,
        "docBlock": {
          "description": "A statistic group can have its items divided evenly.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A group of statistics.",
      "tags": []
    }
  },
  "src/views/Statistic/StatisticLabel.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "label": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Shorthand for primary content.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A statistic can contain a label to help provide context for the presented value.",
      "tags": []
    }
  },
  "src/views/Statistic/StatisticValue.js": {
    "methods": [],
    "props": {
      "as": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.as"
        },
        "required": false,
        "docBlock": {
          "description": "An element type to render as (string or function).",
          "tags": []
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content.",
          "tags": []
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "docBlock": {
          "description": "Additional classes.",
          "tags": []
        }
      },
      "text": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "docBlock": {
          "description": "Format the value with smaller font size to fit nicely beside number values.",
          "tags": []
        }
      },
      "value": {
        "type": {
          "name": "custom",
          "raw": "customPropTypes.contentShorthand"
        },
        "required": false,
        "docBlock": {
          "description": "Primary content of the StatisticValue. Mutually exclusive with the children prop.",
          "tags": []
        }
      }
    },
    "docBlock": {
      "description": "A statistic can contain a numeric, icon, image, or text value.",
      "tags": []
    }
  }
}